//!  █████╗  █████╗ ███╗  ██╗ ██████╗████████╗ █████╗ ███╗  ██╗████████╗ ██████╗
//! ██╔══██╗██╔══██╗████╗ ██║██╔════╝╚══██╔══╝██╔══██╗████╗ ██║╚══██╔══╝██╔════╝
//! ██║  ╚═╝██║  ██║██╔██╗██║╚█████╗    ██║   ███████║██╔██╗██║   ██║   ╚█████╗
//! ██║  ██╗██║  ██║██║╚████║ ╚═══██╗   ██║   ██╔══██║██║╚████║   ██║    ╚═══██╗
//! ╚█████╔╝╚█████╔╝██║ ╚███║██████╔╝   ██║   ██║  ██║██║ ╚███║   ██║   ██████╔╝
//!  ╚════╝  ╚════╝ ╚═╝  ╚══╝╚═════╝    ╚═╝   ╚═╝  ╚═╝╚═╝  ╚══╝   ╚═╝   ╚═════╝

// выбрал все элементы в массиве для лайков
const likeButtons = document.querySelectorAll(".element__like-button");
// все кнопки удаления
const removeButtons = document.querySelectorAll(".element__remove-button");

//* ██╗     ██╗██╗  ██╗███████╗  ██████╗ ██╗   ██╗████████╗████████╗ █████╗ ███╗  ██╗ ██████╗
//* ██║     ██║██║ ██╔╝██╔════╝  ██╔══██╗██║   ██║╚══██╔══╝╚══██╔══╝██╔══██╗████╗ ██║██╔════╝
//* ██║     ██║█████═╝ █████╗    ██████╦╝██║   ██║   ██║      ██║   ██║  ██║██╔██╗██║╚█████╗
//* ██║     ██║██╔═██╗ ██╔══╝    ██╔══██╗██║   ██║   ██║      ██║   ██║  ██║██║╚████║ ╚═══██╗
//* ███████╗██║██║ ╚██╗███████╗  ██████╦╝╚██████╔╝   ██║      ██║   ╚█████╔╝██║ ╚███║██████╔╝
//* ╚══════╝╚═╝╚═╝  ╚═╝╚══════╝  ╚═════╝  ╚═════╝    ╚═╝      ╚═╝    ╚════╝ ╚═╝  ╚══╝╚═════╝

// принимает в себя массив, в и меняет у него классы для лайков
function toggleLikeButton(array) {
  // выполняем для каждого элемента массива
  array.forEach((button) => {
    // вешаем событие клика по кнопке
    button.addEventListener("click", () => {
      // тоглим класс для кнопки
      button.classList.toggle("element__like-button_enabled");
    });
  });
  // я бы мог написать явный выход из функции, но не вижу смысла
}
// вызываем функцию, передаем ей массив
toggleLikeButton(likeButtons);

//! ███╗   ███╗ █████╗ ██████╗  █████╗ ██╗        ██╗       ██╗██╗███╗  ██╗██████╗  █████╗  ██╗       ██╗ ██████╗
//! ████╗ ████║██╔══██╗██╔══██╗██╔══██╗██║        ██║  ██╗  ██║██║████╗ ██║██╔══██╗██╔══██╗ ██║  ██╗  ██║██╔════╝
//! ██╔████╔██║██║  ██║██║  ██║███████║██║        ╚██╗████╗██╔╝██║██╔██╗██║██║  ██║██║  ██║ ╚██╗████╗██╔╝╚█████╗
//! ██║╚██╔╝██║██║  ██║██║  ██║██╔══██║██║         ████╔═████║ ██║██║╚████║██║  ██║██║  ██║  ████╔═████║  ╚═══██╗
//! ██║ ╚═╝ ██║╚█████╔╝██████╔╝██║  ██║███████╗    ╚██╔╝ ╚██╔╝ ██║██║ ╚███║██████╔╝╚█████╔╝  ╚██╔╝ ╚██╔╝ ██████╔╝
//! ╚═╝     ╚═╝ ╚════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝     ╚═╝   ╚═╝  ╚═╝╚═╝  ╚══╝╚═════╝  ╚════╝    ╚═╝   ╚═╝  ╚═════╝

//*  █████╗ ██████╗ ███████╗███╗  ██╗
//* ██╔══██╗██╔══██╗██╔════╝████╗ ██║
//* ██║  ██║██████╔╝█████╗  ██╔██╗██║
//* ██║  ██║██╔═══╝ ██╔══╝  ██║╚████║
//* ╚█████╔╝██║     ███████╗██║ ╚███║
//*  ╚════╝ ╚═╝     ╚══════╝╚═╝  ╚══╝

// определяем кнопку которая будет вызывать конкретный попап
const openEditPopupButton = document.querySelector(".profile__edit-button");

const openAddPopupButton = document.querySelector(".profile__add-button");
// выбрал все существующие попапы,
// они нужны чтобы установить остановку передачи событий для вложенных элементов
const popups = document.querySelectorAll(".popup");

// определение коллекции, каждый элемент которой должен получить необходимый датасет
const openPreviewButtons = document.querySelectorAll(".element__picture");
// задал необходимый датасет каждому элементу этой коллекции,
// это понадобится при использовании универсальной функции
openPreviewButtons.forEach(
  (element) => (element.dataset.open = ".popup_action_show-image")
);
// функция которая будет вызывать необходимый попап
function openModalWithButton(button) {
  // можго было бы нгазгачить и отделбную константу и передавать ее в дальнейшем,
  // но она нужна тут всего один раз поэтому я ее не делал
  // const classSelector = button.dataset.open;

  // если будет передана коллекция, а она будет - коллекция карточек,
  // то обработчик вешается на все карточки из этого массива
  // проверка на коллекцию
  if (NodeList.prototype.isPrototypeOf(button)) {
    // тут передана сама коллекция
    button.forEach((element) => {
      // обработчик для каждого элемента
      element.addEventListener("click", () => {
        // у каждой кнопки в датасете указано какой элемент она должна открыть,
        // передал это значение в константу
        const modalWindow = document.querySelector(element.dataset.open);
        // добавил класс, выше упомянотому элементу
        modalWindow.classList.add("popup_opened");
      });
    });
  } else {
    // определил с каким именно окном надо взаимодействовать и заключил в константу
    // обьявлена в пределах этой функции, так как определяется только здесь с помощью передаваемого аргумента
    const modalWindow = document.querySelector(button.dataset.open);
    // обработчик по клику
    button.addEventListener("click", () => {
      // добавляет класс который открывает попап
      modalWindow.classList.add("popup_opened");
      // const childOfModal = modalWindow.children[0];
      // if (childOfModal.nodeName === "FORM") {
      //   childOfModal.reset();
      // }
    });
  }
}
// вызвал функцию, которая открывает попап в зависимости от переданное данной функции кнопки
openModalWithButton(openEditPopupButton);
openModalWithButton(openAddPopupButton);
openModalWithButton(openPreviewButtons);

//*  █████╗ ██╗      █████╗  ██████╗███████╗
//* ██╔══██╗██║     ██╔══██╗██╔════╝██╔════╝
//* ██║  ╚═╝██║     ██║  ██║╚█████╗ █████╗
//* ██║  ██╗██║     ██║  ██║ ╚═══██╗██╔══╝
//* ╚█████╔╝███████╗╚█████╔╝██████╔╝███████╗
//*  ╚════╝ ╚══════╝ ╚════╝ ╚═════╝ ╚══════╝

// определяем массив всех элементов которые закрывают попап
const closePopupElements = document.querySelectorAll(
  ".popup__close-button , .popup"
);

// закрывает модалки по нажитию определенных кнопок
function closeModalWindow(elements) {
  // для каждой кнопки из массива
  elements.forEach((el) => {
    // обработчик по клику
    el.addEventListener("click", () => {
      // для всех модалок с классом попап, они находятся в массиве попапс
      popups.forEach((e) => {
        // удалаяем класс
        e.classList.remove("popup_opened");
        // заодно и очистил форму,
        // если в ней что то написано,
        // если она вообще будет,
        // определил только первого и единственного ребенка модального окна,
        // у которого будет происходить сброс формы
        const childOfModal = e.firstElementChild;
        if (childOfModal.nodeName === "FORM") {
          childOfModal.reset();
        }
      });
    });
  });
}
// вызов
closeModalWindow(closePopupElements);

//*  ██████╗████████╗ █████╗ ██████╗   ██████╗ ██████╗  █████╗ ██████╗
//* ██╔════╝╚══██╔══╝██╔══██╗██╔══██╗  ██╔══██╗██╔══██╗██╔══██╗██╔══██╗
//* ╚█████╗    ██║   ██║  ██║██████╔╝  ██████╔╝██████╔╝██║  ██║██████╔╝
//*  ╚═══██╗   ██║   ██║  ██║██╔═══╝   ██╔═══╝ ██╔══██╗██║  ██║██╔═══╝
//* ██████╔╝   ██║   ╚█████╔╝██║       ██║     ██║  ██║╚█████╔╝██║
//* ╚═════╝    ╚═╝    ╚════╝ ╚═╝       ╚═╝     ╚═╝  ╚═╝ ╚════╝ ╚═╝

// массив в котором находятся все элементы внутри попапов
const modalWindow = document.querySelectorAll(
  ".popup__container, .popup__preview"
);

// останавлявает передачу события дочерним элементам
function stopProp(element) {
  element.forEach((el) => {
    el.addEventListener("click", (e) => {
      e.stopPropagation();
    });
  });
}

stopProp(modalWindow);

//* ███████╗██████╗ ██╗████████╗  ██████╗  █████╗ ██████╗ ██╗   ██╗██████╗
//* ██╔════╝██╔══██╗██║╚══██╔══╝  ██╔══██╗██╔══██╗██╔══██╗██║   ██║██╔══██╗
//* █████╗  ██║  ██║██║   ██║     ██████╔╝██║  ██║██████╔╝██║   ██║██████╔╝
//* ██╔══╝  ██║  ██║██║   ██║     ██╔═══╝ ██║  ██║██╔═══╝ ██║   ██║██╔═══╝
//* ███████╗██████╔╝██║   ██║     ██║     ╚█████╔╝██║     ╚██████╔╝██║
//* ╚══════╝╚═════╝ ╚═╝   ╚═╝     ╚═╝      ╚════╝ ╚═╝      ╚═════╝ ╚═╝

const popupEditProfileForm = document.forms["edit-profile"];
const profileName = document.querySelector(".profile__name");
const profileDescription = document.querySelector(".profile__description");

const popupAddImageForm = document.forms["add-image"];

function editProfile(form) {
  // установка слушателя событий по нажатию на кнопку сохранить
  // <button type="submit">Сохранить</button>
  form.addEventListener("submit", (e) => {
    // обращаясь через форму
    // определяем значения атрибутов велью,
    // переданные в именованные инпуты
    // <input name="name">
    const name = form.name.value;
    // и <input name="description">
    const description = form.description.value;
    // передаем подученные значения в необходимую разметку html
    // с помощью метода текстКонтент
    profileName.textContent = name;
    profileDescription.textContent = description;
    // закрываем попап через событие отправки формы,
    // на всякий случай прописал через явное удаление класса у родителя
    form.offsetParent.classList.remove("popup_opened");
    // остановка стандартной отправки формы
    e.preventDefault();
  });
}
editProfile(popupEditProfileForm);
